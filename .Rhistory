ggplot(data = e, aes(x = AgeSubject, y = RTlexdec)) +
geom_boxplot()
ggplot(data = e, aes(x = RTlexdec, y = Young)) +
geom_point(alpha = 0.5, size = 3)
ggplot(data = e, aes(x = RTlexdec, y = Young)) +
geom_point(alpha = 0.5, size = 3) +
stat_smooth(method = "lm")
ggplot(data = e, aes(x = RTlexdec, y = Young)) +
geom_point(alpha = 0.5, size = 3) +
stat_smooth(method = "glm")
ggplot(data = e, aes(x = RTlexdec, y = Young)) +
geom_point(alpha = 0.5, size = 3) +
stat_smooth(method = "loess")
ggplot(data = e, aes(x = RTlexdec, y = Young)) +
geom_point(alpha = 0.5, size = 3)
plot_model(fit3)
plot_model(fit3, show.intercept = TRUE)
plot_model(fit3, show.intercept = TRUE, transform = NULL)
plot_model(fit3, show.intercept = FALSE, transform = NULL)
plot_model(fit3, type = "pred")
predict(fit3,
newdata = tibble(RT = 6.6),
type = "response")
fit3
predict(fit3,
newdata = tibble(RTlexdec = 6.6),
type = "response")
predict(fit3,
newdata = tibble(RTlexdec = seq(5, 7, by = 0.1)),
type = "response")
range(e$RTlexdec)
preds <- predict(fit3,
newdata = tibble(RTlexdec = seq(5, 7, by = 0.1)),
type = "response")
preds <- predict(fit3,
newdata = tibble(RTlexdec = seq(4, 7, by = 0.1)),
type = "response")
my_data <- tibble(
RTlexdec = seq(4, 7, by = 0.1),
Prob = preds
)
my_data
preds <- predict(fit3,
newdata = tibble(RTlexdec = seq(6, 7, out.length = 100)),
type = "response")
preds <- predict(fit3,
newdata = tibble(RTlexdec = seq(6, 7, by = 0.01)),
type = "response")
my_data <- tibble(
RTlexdec = seq(6, 7, by = 0.01),
Prob = preds
)
nrow(my_data)
ggplot(data = my_data, aes(x = RTlexdec, y = Prob)) +
geom_line()
ggplot(data = my_data, aes(x = RTlexdec, y = Prob)) +
geom_line() +
geom_point()
ggplot(data = my_data, aes(x = RTlexdec, y = Prob)) +
geom_line() +
geom_point(shape = 21)
ggplot(data = my_data, aes(x = RTlexdec, y = Prob)) +
geom_line() +
geom_point(shape = 21, fill = "white")
plot_model(fit3, type = "pred")
ggplot(
data = long,
aes(
x = exp_r,
y = correct,
color = bin_difficulty
)
) +
stat_summary(
fun.data = mean_cl_boot,
geom = "errorbar", width = 0,
linewidth = 3,
# color = "black",
# color = "slateblue",
alpha = 0.2,
position = position_dodge(width = 0.7),
show.legend = FALSE
) +
stat_summary(position = position_dodge(width = 0.7)) +
theme_bw(
base_size = 13,
base_family = "Futura"
) +
theme(
legend.position = "none",
plot.title = ggtext::element_markdown()
) +
scale_y_continuous(labels = percent_format()) +
scale_color_manual(values = c("darkorange2", "slateblue")) +
coord_cartesian(ylim = c(0, 1)) +
labs(
x = "Experience with R",
y = "Accuracy",
color = "Perceived difficulty",
title = customTitle,
# subtitle = "Never use Comic Sans",
# caption = "This is a caption"
)
ggplot(
data = d |>
filter(
Participant %in% c("Part_5", "Part_15", "Part_8"),
Affix %in% c("bar", "ede")
),
aes(
x = Affix |> fct_reorder(RT, .fun = mean),
y = RT,
color = Participant
)
) +
stat_summary(aes(group = Participant),
geom = "line",
linetype = "dashed",
alpha = 0.5,
position = position_dodge(width = 0.7)
) +
stat_summary(
fun.data = mean_cl_normal,
geom = "errorbar", width = 0,
position = position_dodge(width = 0.7),
linewidth = 3,
# color = "slateblue",
alpha = 0.2
) +
stat_summary(position = position_dodge(width = 0.7)) +
geom_label(
data = d |>
filter(
Participant %in% c("Part_5", "Part_15", "Part_8"),
Affix %in% c("bar")
) |>
summarize(
RT = mean(RT),
.by = c(Affix, Participant)
),
aes(label = Participant),
position = position_dodge(width = 0.7),
# NOTE: Or you can use position_nudge(x = ...) if
# you prefer to have the labels *next* to the means
family = "Futura"
) +
theme_classic(
base_size = 13,
base_family = "Futura"
) +
theme(
legend.position = "none"
) +
labs(
x = "Affix",
y = "Reaction time (ms)",
title = "Danish data"
) +
# NOTE: If you want to change colours:
scale_color_manual(
values = c("black", "darkorange2", "slateblue")
)
library(tidyverse)
d <- read_csv("../data/danish-1.csv")
ggplot(
data = d |>
filter(
Participant %in% c("Part_5", "Part_15", "Part_8"),
Affix %in% c("bar", "ede")
),
aes(
x = Affix |> fct_reorder(RT, .fun = mean),
y = RT,
color = Participant
)
) +
stat_summary(aes(group = Participant),
geom = "line",
linetype = "dashed",
alpha = 0.5,
position = position_dodge(width = 0.7)
) +
stat_summary(
fun.data = mean_cl_normal,
geom = "errorbar", width = 0,
position = position_dodge(width = 0.7),
linewidth = 3,
# color = "slateblue",
alpha = 0.2
) +
stat_summary(position = position_dodge(width = 0.7)) +
geom_label(
data = d |>
filter(
Participant %in% c("Part_5", "Part_15", "Part_8"),
Affix %in% c("bar")
) |>
summarize(
RT = mean(RT),
.by = c(Affix, Participant)
),
aes(label = Participant),
position = position_dodge(width = 0.7),
# NOTE: Or you can use position_nudge(x = ...) if
# you prefer to have the labels *next* to the means
family = "Futura"
) +
theme_classic(
base_size = 13,
base_family = "Futura"
) +
theme(
legend.position = "none"
) +
labs(
x = "Affix",
y = "Reaction time (ms)",
title = "Danish data"
) +
# NOTE: If you want to change colours:
scale_color_manual(
values = c("black", "darkorange2", "slateblue")
)
length(levels(d$Affix))
length(levels(as.factor(d$Affix)))
library(tidyverse)
library(scales)
library(sjPlot)
library(emmeans)
d <- read_csv("data/danish-1.csv")
en <- read_csv("data/english-1.csv")
rc <- read_csv("data/rClauseData-3.csv") |>
filter(Type != "Filler")
d
en
rc
# NOTE: Part 1: Plotting individual variation when the data is continuous
# Here's one way to combine different dimensions of the data
# What are some potential problems here...?
ggplot(data = d, aes(x = Affix |> fct_reorder(RT, .fun = mean), y = RT)) +
# geom_boxplot(alpha = 0.3, color = "gray") +
stat_summary(
fun.data = mean_sdl,
linewidth = 5,
alpha = 0.2,
color = "slateblue"
) +
stat_summary() +
stat_summary(aes(group = Participant),
geom = "line",
alpha = 0.1,
linewidth = 1
) +
theme_classic(base_family = "Futura") +
labs(
x = "Affix",
y = "Reaction time (ms)"
)
rc # Let's create a binary Low response col:
rc <- rc |>
mutate(Low = if_else(Response == "Low", 1, 0))
ggplot(data = rc, aes(x = Condition, y = Low)) +
stat_summary(aes(group = ID),
geom = "line",
alpha = 0.05,
linewidth = 1
) +
stat_summary() +
theme_classic(base_family = "Futura") +
# WARN: These are percentages *derived* from 0/1s
scale_y_continuous(labels = percent_format()) +
scale_x_discrete(limits = c("NoBreak", "High", "Low")) +
labs(
x = "Condition",
y = "% of Low responses"
)
# ANSWER: We can no longer use Condition, of course; but we can use Proficiency, for example:
ggplot(data = rc, aes(x = Proficiency, y = Low)) +
stat_summary(aes(group = Item),
geom = "line",
alpha = 0.05,
linewidth = 1
) +
stat_summary() +
theme_classic(base_family = "Futura") +
# WARN: These are percentages *derived* from 0/1s
scale_y_continuous(labels = percent_format()) +
scale_x_discrete(limits = c("Int", "Adv", "Nat")) +
labs(
x = "Proficiency",
y = "% of Low responses"
)
fit <- glm(Low ~ Condition + Proficiency, data = rc, family = binomial())
summary(fit)
# HACK: Easiest way to plot model's estimates: plot_model(), which uses ggplot2
plot_model(fit,
transform = NULL,
show.intercept = TRUE
) +
# NOTE: You can then adjust the plot as usual:
theme_classic(base_family = "Futura") +
labs(title = NULL) +
# NOTE: E.g., let's add a dashed line for zero effect (notice the flipped coord):
geom_hline(yintercept = 0, linetype = "dashed", color = "gray")
# NOTE: How about multiple comparisons...?
emmeans(fit, pairwise ~ Proficiency)$contrasts |>
plot() # Again, this is just a typical ggplot2 object
rm(list = ls())
library(tidyverse)
library(scales)
library(sjPlot)
library(emmeans)
d <- read_csv("data/danish-1.csv")
en <- read_csv("data/english-1.csv")
rc <- read_csv("data/rClauseData-3.csv") |>
filter(Type != "Filler")
d
en
rc
# NOTE: Part 1: Plotting individual variation when the data is continuous
# Here's one way to combine different dimensions of the data
# What are some potential problems here...?
ggplot(data = d, aes(x = Affix |> fct_reorder(RT, .fun = mean), y = RT)) +
# geom_boxplot(alpha = 0.3, color = "gray") +
stat_summary(
fun.data = mean_sdl,
linewidth = 5,
alpha = 0.2,
color = "slateblue"
) +
stat_summary() +
stat_summary(aes(group = Participant),
geom = "line",
alpha = 0.1,
linewidth = 1
) +
theme_classic(base_family = "Futura") +
labs(
x = "Affix",
y = "Reaction time (ms)"
)
rc # Let's create a binary Low response col:
rc <- rc |>
mutate(Low = if_else(Response == "Low", 1, 0))
ggplot(data = rc, aes(x = Condition, y = Low)) +
stat_summary(aes(group = ID),
geom = "line",
alpha = 0.05,
linewidth = 1
) +
stat_summary() +
theme_classic(base_family = "Futura") +
# WARN: These are percentages *derived* from 0/1s
scale_y_continuous(labels = percent_format()) +
scale_x_discrete(limits = c("NoBreak", "High", "Low")) +
labs(
x = "Condition",
y = "% of Low responses"
)
# ANSWER: We can no longer use Condition, of course; but we can use Proficiency, for example:
ggplot(data = rc, aes(x = Proficiency, y = Low)) +
stat_summary(aes(group = Item),
geom = "line",
alpha = 0.05,
linewidth = 1
) +
stat_summary() +
theme_classic(base_family = "Futura") +
# WARN: These are percentages *derived* from 0/1s
scale_y_continuous(labels = percent_format()) +
scale_x_discrete(limits = c("Int", "Adv", "Nat")) +
labs(
x = "Proficiency",
y = "% of Low responses"
)
fit <- glm(Low ~ Condition + Proficiency, data = rc, family = binomial())
summary(fit)
# HACK: Easiest way to plot model's estimates: plot_model(), which uses ggplot2
plot_model(fit,
transform = NULL,
show.intercept = TRUE
) +
# NOTE: You can then adjust the plot as usual:
theme_classic(base_family = "Futura") +
labs(title = NULL) +
# NOTE: E.g., let's add a dashed line for zero effect (notice the flipped coord):
geom_hline(yintercept = 0, linetype = "dashed", color = "gray")
# NOTE: How about multiple comparisons...?
emmeans(fit, pairwise ~ Proficiency)$contrasts |>
plot() # Again, this is just a typical ggplot2 object
# Now, we can use emmeans
emmeans(fit, pairwise ~ Proficiency)$contrasts |>
plot() # Again, this is just a typical ggplot2 object
fit
fit_rc <- glm(Low ~ Condition + Proficiency, data = rc, family = binomial())
summary(fit_rc)
# HACK: Easiest way to plot model's estimates: plot_model(), which uses ggplot2
plot_model(fit_rc,
transform = NULL,
show.intercept = TRUE
) +
# NOTE: You can then adjust the plot as usual:
theme_classic(base_family = "Futura") +
labs(title = NULL) +
# NOTE: E.g., let's add a dashed line for zero effect (notice the flipped coord):
geom_hline(yintercept = 0, linetype = "dashed", color = "gray")
# Back in the day (using danish-1.csv):
aov(RT ~ Affix, data = d) |>
TukeyHSD() |>
plot()
# Now, we can use emmeans (using rClauseData-3.csv)
emmeans(fit_rc, pairwise ~ Proficiency)$contrasts |>
plot() # Again, this is just a typical ggplot2 object
# Now, we can use emmeans (using rClauseData-3.csv)
emmeans(fit_rc, pairwise ~ Proficiency)$contrasts |>
plot() # Again, this is just a typical ggplot2 object
emmeans(fit_rc, pairwise ~ Affix)$contrasts |> plot()
fit_d <- lm(RT ~ Affix, data = d)
emmeans(fit_d, pairwise ~ Affix)$contrasts |> plot()
# NOTE: Manual mode: more control
mc <- emmeans(fit, pairwise ~ Affix)$contrasts |>
as_tibble() |>
mutate(lower_CI = estimate - 1.96*SE,
upper_CI = estimate + 1.96*SE)
# NOTE: Manual mode: more control
mc <- emmeans(fit_d, pairwise ~ Affix)$contrasts |>
as_tibble() |>
mutate(lower_CI = estimate - 1.96*SE,
upper_CI = estimate + 1.96*SE)
ggplot(data = mc,
aes(x = estimate,
y = contrast |> fct_reorder(estimate))) +
geom_errorbarh(aes(xmin = lower_CI, xmax = upper_CI),
height = 0, linewidth = 5,
alpha = 0.3,
color = "blue") +
geom_errorbarh(aes(xmin = estimate - SE, xmax = estimate + SE),
height = 0, linewidth = 0.5,
alpha = 1,
color = "black") +
geom_point(size = 3)
en <- en |>
mutate(young = if_else(AgeSubject == "young", 1, 0))
en_fit <- glm(young ~ RTlexdec, data = en, family = "binomial")
summary(en_fit)
# NOTE: Ok, we can predict the log-odds of being young based on
# participants' reaction time (not surprising).
# Let's see the range of RT:
range(en$RTlexdec)
new_data <- tibble(
RTlexdec = seq(6, 8, length.out = 100)
)
predictions <- predict(
en_fit,
newdata = new_data,
type = "response"
)
en_fit_pred <- tibble(
RTlexdec = seq(6, 8, length.out = 100),
Young = predictions
)
# NOTE: Finally, we plot it:
ggplot(data = en_fit_pred, aes(x = RTlexdec, y = Young)) +
geom_line()
# HACK: We can do all that with the plot_model() function :)
sjPlot::plot_model(en_fit, type = "pred")
library(plotly) # HACK: For interactive plots
library(patchwork) # HACK: For combining plots
library(ggdist) # HACK: To plot distributions
ggplot(data = en, aes(
x = Familiarity, y = RTlexdec,
group = Word, color = AgeSubject
)) +
geom_point(size = 5, alpha = 0.3) +
theme_classic(base_family = "Futura") +
# WARN: These are percentages *derived* from 0/1s
labs(
x = "Familiarity",
y = "Reaction time (log)"
) +
scale_color_manual(values = c("darkorange2", "slateblue"))
ggplotly()
fig1 <- ggplot(data = rc, aes(x = Hours, y = RT, group = ID)) +
geom_point() +
theme_classic(base_family = "Futura") +
# WARN: These are percentages *derived* from 0/1s
labs(
x = "Hours of study per week",
y = "Reaction time (ms)"
)
fig2 <- plot_model(fit,
transform = NULL,
show.intercept = TRUE
) +
# NOTE: You can then adjust the plot as usual:
theme_classic(base_family = "Futura") +
labs(title = NULL) +
# NOTE: E.g., let's add a dashed line for zero effect (notice the flipped coord):
geom_hline(yintercept = 0, linetype = "dashed", color = "gray")
# HACK: patchwork makes it very easy to combine figures:
fig1 / fig2
fig1 + fig2
# NOTE: ggdist: let's go back to our stat_summary() above
ggplot(data = d, aes(x = Affix |> fct_reorder(RT, .fun = mean), y = RT)) +
# geom_boxplot(alpha = 0.3, color = "gray") +
# stat_summary() +
stat_halfeye(.width = c(0.5, 0.7)) +
theme_classic(base_family = "Futura") +
labs(
x = "Affix",
y = "Reaction time (ms)"
)
